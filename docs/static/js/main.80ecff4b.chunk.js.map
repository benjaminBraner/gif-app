{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"4LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KA0BA,OACG,sBAAMC,SAjBY,SAACC,GACnBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE5BR,EAAc,CAACE,IAMfC,EAAc,MAKjB,SACG,uBACGM,KAAK,OACLC,MAAOR,EAEPS,SA9BgB,SAACN,GAIvBF,EAAcE,EAAEO,OAAOF,a,8BCNhBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAUH,GAD5C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAICA,EAAKC,OAJN,uBAIbC,EAJa,EAIbA,KAIDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZpB,kBAgBbM,GAhBa,4CAAH,sDCFPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAErC,OACG,sBAAKc,UAAU,yCAAf,UACG,4BAAIJ,IACJ,qBAAKK,IAAKf,EAAKgB,IAAKN,QCHhBO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACtB,ECDyB,SAACA,GAC1B,MAA0Bb,mBAAS,CAChCoB,KAAM,GACNa,SAAS,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WAERxB,EAAQC,GACJwB,MAAK,SAAAC,GAEAH,EAAS,CACNf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEIqB,EDjBuBK,CAAa1B,GAA/Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAInB,OACG,qCACG,6BAAKpB,IAEJoB,GAAW,2CAGZ,qBAAKJ,UAAU,YAAf,SAEMH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEhBxBgB,EAAe,WAIlB,MAAoCxC,mBAAS,CAAC,KAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAIA,OACG,qCACG,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAIS,cAAC,EAAD,CACGc,SAAU4B,GACLA,S,MCjB1BC,IAASC,OACH,cAAC,EAAD,IACHC,SAASC,eAAe,W","file":"static/js/main.80ecff4b.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n   const [inputValue, setInputValue] = useState(\"\");\r\n\r\n   const handleInputValue = (e) => {\r\n      /*Básicamente, trae el valor de cualquier input al que se solicitó.\r\n      En este caso, es el elemento input, por lo que se puede acceder a todo lo que inserte \r\n      en su input a través de e.target.value*/\r\n      setInputValue(e.target.value)\r\n      //el state sera lo que sea que este en el input\r\n   } \r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      // console.log(\"formulario enviado\");\r\n\r\n      if (inputValue.trim().length > 2) {\r\n         // setCategories( category => [...category, inputValue]);\r\n         setCategories([inputValue]);\r\n         /*no puedo llamar el primer elemento del state del otro componente porque desde este com-\r\n         ponente no tengo acceso a el como tal, y como el estado actual de la categoria tambien se\r\n         puede llamar con un callback lo hago de esa forma, y el parametro representaria el estado\r\n         actual del state */\r\n\r\n         setInputValue(\"\");\r\n      }\r\n   }\r\n\r\n   return (\r\n      <form onSubmit={handleSubmit}>\r\n         <input\r\n            type=\"text\"\r\n            value={inputValue}   \r\n            /*onChange permite escuchar el cambio de valor de un input */\r\n            onChange={handleInputValue}\r\n         />\r\n      </form>\r\n   )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n   setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\n\r\nexport const getGifs = async(category) => {\r\n   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=N4kgTpjX0UF1jr9W86SpQWAEizZqdVVs`;\r\n   const resp = await fetch(url);\r\n   //2. traigo la data del json con desestructuracion\r\n   const {data} = await resp.json();\r\n   \r\n   /* 3. como data me trae un array con objetos que tienen muchas propiedades que no me sirven, \r\n   con un map, limpio cada elemento del array*/\r\n   const gifs = data.map(img => {\r\n      return {\r\n         id: img.id,\r\n         title: img.title,\r\n         url: img.images?.downsized_medium.url\r\n      }\r\n   })\r\n\r\n   return gifs;\r\n}","\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n   // console.log({id,title,url});\r\n   return (\r\n      <div className=\"card animate__animated animate__bounce\">\r\n         <p>{title}</p>\r\n         <img src={url} alt={title}></img>\r\n      </div>\r\n   )             \r\n}","import { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport {GifGridItem} from \"./GifGridItem\";\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n   const {data:images,loading} = useFetchGifs(category);\r\n   \r\n   \r\n\r\n   return (\r\n      <>  \r\n         <h3>{category}</h3>\r\n\r\n         {loading && <p>Loading...</p>}\r\n         {/* {loading ? <p>Loading...</p> : null} */}\r\n\r\n         <div className=\"card-grid\">\r\n            {\r\n               images.map(img => (\r\n                  <GifGridItem\r\n                     key={img.id}\r\n                     {...img}\r\n                  />\r\n               ))\r\n            }\r\n         \r\n         </div> \r\n      </>\r\n   )\r\n};\r\n\r\n","\r\nimport {useState,useEffect} from \"react\";\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n   const [state, setState] = useState({\r\n      data: [],\r\n      loading: true\r\n   })\r\n\r\n   useEffect( () => {\r\n\r\n      getGifs(category)    \r\n         .then(imgs => {\r\n               // console.log(imgs);\r\n               setState({\r\n                  data: imgs,\r\n                  loading: false\r\n               })        \r\n         })\r\n   },[category])\r\n\r\n   return state; //{data: [], loading: true}\r\n}","\r\nimport { useState } from \"react\";\r\nimport  {AddCategory}  from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\nconst GifExpertApp = () => {\r\n\r\n   \r\n   \r\n   const [categories, setCategories] = useState([\"\"])\r\n\r\n   \r\n\r\n   return (\r\n      <>\r\n         <h2>GifExpertApp</h2>\r\n         {/* <AddCategory/> maneja lo que se envia en el input */}\r\n         <AddCategory setCategories={setCategories}/>\r\n         <hr/>\r\n         <ol>\r\n            {\r\n               // categories.map(category => \r\n                  /*<GifGrid/> trae la informacion de la API y retorna las imagenes que se mostraran*/\r\n                  <GifGrid \r\n                     category={categories}\r\n                     key={categories}\r\n                  />\r\n                     \r\n               // )\r\n            }       \r\n         </ol>\r\n      </>\r\n   );\r\n}\r\nexport {GifExpertApp};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n      <GifExpertApp />,\n   document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}